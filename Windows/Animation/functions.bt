void PadRecursively()
{
    ushort padding<bgcolor=0x000000>;
    if (padding != 0)
    {
        FSeek(FTell() - 2);
    }
    else
    {
        PadRecursively();
    }
}

int GetPackedKeySize(LmEPackedKeyType type)
{
    local int size;
    local int alignment;

    switch (type)
    {
        case ePackedKeyType_Quat_40:
            size = 5;
            alignment = 1;
            break;
        case ePackedKeyType_Quat_48:
        case ePackedKeyType_Quat_48_Deprecated:
        case ePackedKeyType_Vector3_48:
        case ePackedKeyType_Vector3_48_NoScale:
        case ePackedKeyType_Vector3_128_NoScale:
            size = 6;
            alignment = 2;
            break;
        case ePackedKeyType_Quat_128:
        case ePackedKeyType_Vector3_128:
            size = 16;
            alignment = 16;
            break;
    }

    return size + alignment;
}

uint GetBitsetPopulationCount(uint partsSizeBlocks, uint dataOffset)
{
    local uint64 returnAddress = FTell();

    FSeek(dataOffset);

    local int i = 0;
    local uint total = 0;
    for (i = 0; i < partsSizeBlocks; i++)
    {
        uint64 v6;
        total += ((0x101010101010101
                  * ((((v6 - ((v6 >> 1) & 0x5555555555555555)) & 0x3333333333333333)
                    + (((v6 - ((v6 >> 1) & 0x5555555555555555)) >> 2) & 0x3333333333333333)
                    + ((((v6 - ((v6 >> 1) & 0x5555555555555555)) & 0x3333333333333333)
                      + (((v6 - ((v6 >> 1) & 0x5555555555555555)) >> 2) & 0x3333333333333333)) >> 4)) & 0xF0F0F0F0F0F0F0F)) >> 32) >> 24;
    }

    FSeek(returnAddress);
    return total;
}