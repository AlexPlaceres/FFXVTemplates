//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: weapon.win32.bins
//   Authors: Light, Kizari
//   Version: 0.8
//   Purpose: Contains ai animation interop data
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// Point this to Utilities folder
#include "C:\Users\....\utils.bt";





local int preset = 1;
//<bgcolor=0xff00aa>; purp
//<bgcolor=0xff0000>; blue

// Stores each struct's starting point for seeking entry data
local int charStartingPoint;
// Stores ending of each struct to align next one
local int structEndPoint;

struct ResourceId
{
    uint type;
    uint primary;
    uint secondary;
   // uint flags;
};

struct Bin
{
    char magic[12];
    int size;
    ResourceId resourceId;
    int index;
    ResourceId maybeAnotherResourceId<bgcolor=0x00ffff>;
    uint count<bgcolor=0xff00aa>;
    //uint maybeChildSize<bgcolor=0xff00aa>;
    //uint maybeParentSizeOffset<bgcolor=0xFFEEEE>;
    
};


struct StringBinItem
{
    string normalisedName;
    string name;
    string location;
};
    

struct ArrayBuildInfo
{
    int fixID<bgcolor=0xff00aa>;
    int padding<bgcolor=0x0000ff>;
    int TrueEntryCount;
    int TrueEntrySize;
    int padding<bgcolor=0x0000ff>;
    int DistanceToEnd<bgcolor=0x0000ff>;
    int DistanceToData;
    int padding<bgcolor=0x0000ff>;
    int guesswork_1;
    int padding<bgcolor=0x0000ff>;
    int padding<bgcolor=0x0000ff>;  
    int EntryBufferBarrier<bgcolor=0x339999>;
    charStartingPoint = FTell();
    //unknownHeaderInfo HeaderInfo;

    
   
};

struct entryType1
{
    int fixid;
    int unknown_2;
    int index;
    int unknown_4;
    int offsetName;

    local uint returnAddress = FTell();
    local uint TypeOffset = charStartingPoint   + (entry1Data.DistanceToData) + offsetName - entry1Data.TrueEntrySize;
    
    FSeek(TypeOffset);    
    string name;
    structEndPoint = FTell();
    FSeek(returnAddress);

    int unknown_6;
    int offsetAttribute;
    returnAddress = FTell();
     TypeOffset = charStartingPoint   + (entry1Data.DistanceToData) + offsetAttribute- entry1Data.TrueEntrySize;
    
    FSeek(TypeOffset);    
    string attribute;

    
    FSeek(returnAddress);
    int unknown_8;
    int unknown_9;
    
    
    
    
    
    
};


struct entryType2
{
    int fixid;
    int charOffset;
    int index;
    int unknown_4;
    int unknown_5;
    int unknown_6;
    int unknown_7;
    int unknown_8;



    local uint returnAddress = FTell();
    local uint TypeOffset = charStartingPoint   + (entry2Data.DistanceToData) + charOffset - entry2Data.TrueEntrySize;
    
    FSeek(TypeOffset);    
    string attribute;

    structEndPoint = FTell();
    FSeek(returnAddress);
    
    
    
};


struct BottomCheck { int unknown[120];};

void padNewChunk(int padding) 
{
    
    FSeek(structEndPoint);
    local int currentPos = FTell();
    FSeek(currentPos + padding);


}


local int i; 

Bin outerBin<bgcolor=0x00ff00>;
    Align(256);

Bin innerBin<bgcolor=0x00ff00>;

// Entry 1 
ArrayBuildInfo entry1Data<bgcolor=0xff0000>;
charStartingPoint += 20;

for( i = 0 ; i < 5219  ; i++) 
{
entryType1 entryType_1<bgcolor=0xa3e676>;
}

padNewChunk(3);


// Entry 2
ArrayBuildInfo entry2Data<bgcolor=0xff0000>;

charStartingPoint += 16;

for( i = 0 ; i < 269 ; i++) 
{
entryType2 entryType_2<bgcolor=0xa3e676>;
}

//padNewChunk(3);

