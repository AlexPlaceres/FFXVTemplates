//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: command.win32.bins
//   Authors: Light, Kizari
//   Version: 0.8
//   Purpose: Contains weapon data and attributes
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------



// This is very incomplete, and is likely missing lots of info and structure.
// Nonetheless, rudimentary editing of hitboxes is possible.

// To identify the correct HitboxIDs, you'll need to obtain the hitbox ID from the .ani file of 
// the animation you want to change. 


#include "C:\...\Utilities\utils.bt";




local int preset = 1;
//<bgcolor=0xff00aa>; purp
//<bgcolor=0xff0000>; blue

// Stores each struct's starting point for seeking entry data
local int charStartingPoint;
// Stores ending of each struct to align next one
local int structEndPoint;

struct ResourceId
{
    uint type;
    uint primary;
    //uint secondary;
    //uint flags;
};

struct Bin
{
    char magic[12];
    int size;
    ResourceId resourceId;
    int index;
    ResourceId maybeAnotherResourceId<bgcolor=0x00ffff>;
    uint count<bgcolor=0xff00aa>;
    uint maybeChildSize<bgcolor=0xff00aa>;
    //uint maybeParentSizeOffset<bgcolor=0xFFEEEE>;
    
};


struct StringBinItem
{
    string normalisedName;
    string name;
    string location;
};
    

struct ArrayBuildInfo
{
    int fixID<bgcolor=0xff00aa>;
    int padding<bgcolor=0x0000ff>;
    int TrueEntryCount;
    int TrueEntrySize;
    int padding<bgcolor=0x0000ff>;
    int DistanceToEnd<bgcolor=0x0000ff>;
    int DistanceToData;
    int padding<bgcolor=0x0000ff>;
    int guesswork_1;
    int padding<bgcolor=0x0000ff>;
    int padding<bgcolor=0x0000ff>;  
    int EntryBufferBarrier<bgcolor=0x339999>;
    charStartingPoint = FTell();
    //unknownHeaderInfo HeaderInfo;

    
   
};

struct entryType1
{
    // 137 total
    int unknown_1;
    int unknown_2; 
    int HitboxID; 
    int AttackPower; 
    int unknown[41];
    int Hitstop;
    int unknown_3[25];
    int Stagger; 
    int unknown_4[42];
    float JobChangeGauge;
    int padmaybe[3];
    int HPOnHit;
    int unknown_5[18];

local uint returnAddress = FTell();
if(Hitstop < 10000) {       
    local uint TypeOffset = charStartingPoint   + (entry1Data.DistanceToData) + (Hitstop) - entry1Data.TrueEntrySize;
    
    FSeek(TypeOffset);
 
    int PossiblyData;
}
    structEndPoint = FTell();
    FSeek(returnAddress);

    
};


struct entryType2
{
    int unknown[13];


    local uint returnAddress = FTell();
/*
    local uint TypeOffset = charStartingPoint   + (entry2Data.DistanceToData) + charOffset - entry2Data.TrueEntrySize;
    //local uint TypeOffset = charStartingPoint + (entry1Data.DistanceToData) + charOffset - entry1Data.TrueEntrySize;
    
    FSeek(TypeOffset);    
    string attribute;
*/
    structEndPoint = FTell();
    FSeek(returnAddress);
    
    
    
};




struct BottomCheck { int unknown[120];};

void padNewChunk(int padding) 
{
    
    FSeek(structEndPoint);
    local int currentPos = FTell();
    FSeek(currentPos + padding);


}


local int i; 

Bin outerBin<bgcolor=0x00ff00>;
    Align(256);

Bin innerBin<bgcolor=0x00ff00>;

// Entry 1 
ArrayBuildInfo entry1Data<bgcolor=0xff0000>;
//int paddinsg[548];
charStartingPoint += 0;
//charStartingPoint += 3;

for( i = 0 ; i < 5512 ; i++) 
{
entryType1 entryType_1<bgcolor=0xa3e676>;
}

padNewChunk(1033);

// Entry 2
Bin Bin3<bgcolor=0x00ff00>;
ArrayBuildInfo entry2Data<bgcolor=0xff0000>;

//charStartingPoint += -4;

for( i = 0 ; i < 22 ; i++) 
{
entryType2 entryType_2<bgcolor=0xa3e676>;
}

//padNewChunk(3);
