//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: ani.bt
//   Authors: Kizari, Light
//   Version: 1.1
//   Purpose: FFXV Animation Clips
//  Category: Animation
// File Mask: *.ani
//  ID Bytes: 
//   History: 1.1 -- Added some addl structure to BlackTrigger custom data.
//------------------------------------------------

// Hitboxes are commonly stored in BlackTriggerSTruct of array size '32'.


local int charStartingPoint = 0;
local uint alignmentPaddingSize;

struct Padding
{
    byte padding[alignmentPaddingSize];
};

void Align(int blockSize)
{
    local uint offset = FTell();
    alignmentPaddingSize = blockSize + blockSize * (offset / blockSize) - offset;
    if (alignmentPaddingSize > 0 && alignmentPaddingSize < blockSize)
    {
        Padding padding<bgcolor=0x000000, hidden=true>;
    }
}

// ------------------------------------------------
// Enumerations
// ------------------------------------------------

enum<uint16> LmETriggerTrackType
{
    eTriggerTrackType_LocomotionFeetEventTrack  = 0x0,
    eTriggerTrackType_ExampleType_RangeBegin  = 0x0B,
    eTriggerTrackType_ExampleType_RangeEnd  = 0x14,
    eTriggerTrackType_LuminousMessageTriggerTrack_RangeBegin  = 0x21,
    eTriggerTrackType_LuminousMessageTriggerTrack_RangeEnd  = 0x100,
    eTriggerTrackType_LuminousAssetTriggerTrack_RangeBegin  = 0x1001,
    eTriggerTrackType_LuminousAssetTriggerTrack_Anonymous_RangeBegin  = 0x1001,
    eTriggerTrackType_LuminousAssetTriggerTrack_Anonymous_RangeEnd  = 0x1100,
    eTriggerTrackType_LuminousAssetTriggerTrack_InModel_RangeBegin  = 0x1101,
    eTriggerTrackType_LuminousAssetTriggerTrack_InModel_RangeEnd  = 0x1200,
    eTriggerTrackType_LuminousAssetTriggerTrack_ModelDrawable_RangeBegin  = 0x1201,
    eTriggerTrackType_LuminousAssetTriggerTrack_ModelDrawable_RangeEnd  = 0x1300,
    eTriggerTrackType_LuminousAssetTriggerTrack_Collision_RangeBegin  = 0x1301,
    eTriggerTrackType_LuminousAssetTriggerTrack_Collision_RangeEnd  = 0x1400,
    eTriggerTrackType_LuminousAssetTriggerTrack_VFX_RangeBegin  = 0x1401,
    eTriggerTrackType_LuminousAssetTriggerTrack_VFX_RangeEnd  = 0x1500,
    eTriggerTrackType_LuminousAssetTriggerTrack_Sound_RangeBegin  = 0x1501,
    eTriggerTrackType_LuminousAssetTriggerTrack_Sound_RangeEnd  = 0x1600,
    eTriggerTrackType_LuminousAssetTriggerTrack_Light_RangeBegin  = 0x1601,
    eTriggerTrackType_LuminousAssetTriggerTrack_Light_RangeEnd  = 0x1700,
    eTriggerTrackType_LuminousAssetTriggerTrack_Camera_RangeBegin  = 0x1701,
    eTriggerTrackType_LuminousAssetTriggerTrack_Camera_RangeEnd  = 0x1800,
    eTriggerTrackType_LuminousAssetTriggerTrack_Scaleform_RangeBegin  = 0x1801,
    eTriggerTrackType_LuminousAssetTriggerTrack_Scaleform_RangeEnd  = 0x1900,
    eTriggerTrackType_RequireTrackTypeMatchForRangeEventMatch_RangeEnd  = 0x1FFF,
    eTriggerTrackType_BlackAssetTriggerTrack_General_RangeBegin  = 0x2001,
    eTriggerTrackType_BlackAssetTriggerTrack_General_RangeEnd  = 0x2100,
    eTriggerTrackType_BlackAssetTriggerTrack_VFX_RangeBegin  = 0x2101,
    eTriggerTrackType_BlackAssetTriggerTrack_VFX_RangeEnd  = 0x2200,
    eTriggerTrackType_BlackAssetTriggerTrack_Sound_RangeBegin  = 0x2201,
    eTriggerTrackType_BlackAssetTriggerTrack_Sound_RangeEnd  = 0x2300,
    eTriggerTrackType_BlackAssetTriggerTrack_Combat_RangeBegin  = 0x2301,
    eTriggerTrackType_BlackAssetTriggerTrack_Combat_RangeEnd  = 0x2400,
    eTriggerTrackType_BlackAssetTriggerTrack_Facial_RangeBegin  = 0x2401,
    eTriggerTrackType_BlackAssetTriggerTrack_Facial_RangeEnd  = 0x2500,
    eTriggerTrackType_AnyTypeEnumIdx  = 0x0FFFE,
    eTriggerTrackType_Unknown  = 0x0FFFF,
};

enum LmEAnimCustomDataType
{
    eCustomUserDataType_SkeletalAnimInfo  = 0x0,
    eCustomUserDataType_PhysicsBoneInfo  = 0x1,
    eCustomUserDataType_VertexCache_Deprecated  = 0x2,
    eCustomUserDataType_BeginSubAssetItemTypes  = 0x3,
    eCustomUserDataType_LuminousTriggeredAssetItem_Generic  = 0x3,
    eCustomUserDataType_BeginSubAssetContainerTypes  = 0x100,
    eCustomUserDataType_LuminousAssetTriggerDataCollection  = 0x100,
    eCustomUserDataType_EndSubAssetContainerTypes  = 0x101,
    eCustomUserDataType_Obsolete_LuminousIK_ModelData  = 0x102,
    eCustomUserDataType_BlackTriggerData  = 0x103,
    eCustomUserDataType_OBSOLETE_Sasquatch_ModelData  = 0x104,
    eCustomUserDataType_OBSOLETE_Sasquatch_AnimData  = 0x105,
    eCustomUserDataType_PackedTypeOverrideList  = 0x106,
    eCustomUserDataType_NoMirrorParts  = 0x107,
    eCustomUserDataType_AssetRefContainer_SystemInternalUseOnly  = 0x10000,
    eCustomUserDataType_Obsolete_LuminousWalker_ModelData  = 0x10001,
    eCustomUserDataType_Obsolete_LuminousWalker_AnimData  = 0x10002,
    eCustomUserDataType_LuminousMessageTriggerData  = 0x10003,
    eCustomUserDataType_LuminousAssetTriggerData  = 0x10004,
    eCustomUserDataType_BeginBuildCoordinatorDependencyTypes  = 0x20000,
    eCustomUserDataType_LuminousIkRig  = 0x20000,
    eCustomUserDataType_LuminousTuningSetPack  = 0x20001,
    eCustomUserDataType_LuminousLinkAnimScenePath  = 0x20002,
    eCustomUserDataType_VertexCache  = 0x20003,
    eCustomUserDataType_EndBuildCoordinatorDependencyTypes  = 0x20004,
    eCustomUserDataType_NumCustomDataTypes  = 0x20005
};

enum LmEAnimPropertyBits
{
    eAnimPropertyLooping  = 1,
    eAnimAbsoluteMode  = 2
};

enum LmEPackedKeyType
{
    ePackedKeyType_Quat_40  = 0,
    ePackedKeyType_Quat_48  = 1,
    ePackedKeyType_Quat_48_Deprecated  = 2,
    ePackedKeyType_Quat_128  = 3,
    ePackedKeyType_Vector3_48  = 4    ,      
    ePackedKeyType_Vector3_48_NoScale  = 5  ,
    ePackedKeyType_Vector3_128  = 6      ,   
    ePackedKeyType_Vector3_128_NoScale  = 7,
    ePackedKeyType_Num_PK_Types  = 8
};


// ------------------------------------------------
// Structures
// ------------------------------------------------

struct PackedKey6
{
    byte data[6];
};

struct PackedKey16
{
    byte data[16];
};

struct LmSSingleAnimFrame
{
    ubyte numKeys[3]<bgcolor=0x00ff00>;

    if (numKeys[0] == 0 && numKeys[1] == 0)
    {
        // Empty frames are represented as two zero bytes
        // Go back one and skip the rest of the frame
        FSeek(FTell() - 1);
    }
    else
    {
        ubyte unknowns[((numKeys[1] << 8) + numKeys[2]) & 0xFFF]<bgcolor=0x0099ff>;
        ubyte currentKeyTimeBytes[(((numKeys[1] >> 4) + 16 * numKeys[0]) & 1) + (((numKeys[1] >> 4) + 16 * numKeys[0]) >> 1)]<bgcolor=0x00ffff>;
        Align(2);
        PackedKey6 packedKeys[(numKeys[1] >> 4) + 16 * numKeys[0]];
    }
};

struct LmSAnimFrameChunkInfo
{
    ushort lastFrameStartOffsets[16];
};

struct LmSAnimTriggerData
{
    uint16 triggerFrame;
    uint16 typeAndMirror;
    LmETriggerTrackType trackType;
    int16 customDataIndex;
};

struct blackTriggerSwitch_4 
{
// One size variable, one string
int stringSize;
string data2;
};

struct blackTriggerSwitch_2 
{
// One size variable, one string
int stringSize;
string data2;
};




struct struct_BlackTriggerData 
{
    int arraySize; 
    local uint blockSize = arraySize / 4; 
    local int i;
    int data[blockSize];
    int dataSwitch;

    switch (dataSwitch) {
        case 4 : 
            int stringSize;
            string dataString;
            break; 
        case 16777216 : 
            byte unknown_1[4];
            int unknown_2;
            int unknown_3;
            string unknown_4;
            break;
        case 385884961 : 
            int unknown_1;
            int unknown_2;
            char something[4];
            int unknown_4;
            break;
        case 385884962 :
            int unknown_1;
            int unknown_2;
            char something[4];
            int unknown_4;
            break;
            
        default : break;
    };
};



struct LmSCustomUserDataIndexNode
{   
    
    uint64 dataOffset; 
    LmEAnimCustomDataType type;

    
    local uint returnAddress = FTell();
    local uint TypeOffset = charStartingPoint + dataOffset ;

    FSeek(TypeOffset);    

switch(type) {
        case 259 : struct_BlackTriggerData  BlackTriggerStruct; break;
        case 264 : int size; char ANIB[4]; int anibData[4]; int unknown[150];
        //Array Indexes -- in 693*:
        // Unknown_28 , 128, 
        default : break;



    };
      
    
    

FSeek(returnAddress);


    



    Align(8);
};

struct PartsSizeBlock
{
    uint64 unknown;
};

struct LmAnimation
{
    float durationSeconds;
    int id;
    LmEAnimPropertyBits properties;
    uint keyframeFPS;
    float version;
    uint cacheTypesCount;
    uint partsSizeBlocksCount;
    short usersCount;
    short playCount;

    uint64 constantDataOffset;
    uint64 frameDataChunkStartPointerArrayOffset;
    uint64 animationFrameChunkInformationPointerArrayOffset;
    uint64 frameDataOffset;
    uint64 seedFrameOffset;
    uint64 unpackConstantsOffset;
    uint64 customUserDataIndexOffset;

    uint customUserDataCount;
    uint triggerCount;

    LmSAnimTriggerData triggers[triggerCount]<bgcolor=0x00ffff>;

    PartsSizeBlock partsSizeBlocks[partsSizeBlocksCount]<bgcolor=0xff00aa>;
    PartsSizeBlock partsSizeBlocks2[partsSizeBlocksCount]<bgcolor=0x00ffff>;
    PartsSizeBlock partsSizeBlocks3[partsSizeBlocksCount]<bgcolor=0xff00aa>;

    local float count = (durationSeconds * keyframeFPS) + 1;
    local int chunkCount = (count / 16) + 1;
    
    FSeek(frameDataChunkStartPointerArrayOffset);
    uint64 frameDataChunkOffsets[chunkCount];
    FSeek(unpackConstantsOffset);
    float unpackConstants[cacheTypesCount]<bgcolor=0xff0000>;
    float maybeDecompressRangeScalar<bgcolor=0xff0000>; // Will sometimes be NaN

    local uint customDataSize = frameDataOffset - FTell();
    byte customData[customDataSize]<bgcolor=0x0000ff>;
};


// ------------------------------------------------
// Main Template Logic
// ------------------------------------------------

LmAnimation anim<bgcolor=0xffff00>;

local uint returnAddress = FTell();
FSeek(anim.customUserDataIndexOffset);
charStartingPoint = FTell();

local int i = 0;
for( i = 0 ; i < anim.customUserDataCount  ; i++) 
{
LmSCustomUserDataIndexNode customUserDataIndexNodes<bgcolor=0xff00aa>;
}

FSeek(returnAddress);

if (anim.animationFrameChunkInformationPointerArrayOffset > 0)
{
    FSeek(anim.animationFrameChunkInformationPointerArrayOffset);
    LmSAnimFrameChunkInfo frameChunkInfo<bgcolor=0xff0000>;
}

local uint frameCount = Ceil(anim.durationSeconds * anim.keyframeFPS) + 1;
Printf("Frame Count: %d\n", frameCount);
LmSSingleAnimFrame frames[frameCount]<bgcolor=0xaaaaff, optimize=false>;

FSeek(anim.seedFrameOffset);
LmSSingleAnimFrame seedFrame<bgcolor=0xff0000>;



// Ani 5 -- 
// Array 8 and 9 holds spin attack hitboxes

