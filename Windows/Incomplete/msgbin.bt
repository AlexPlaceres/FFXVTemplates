//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: msgbin.bt
//   Authors: Kizari
//   Version: 1
//   Purpose: Generic template for message bins
//  Category: Resources
// File Mask: *.win32.msgbin
//  ID Bytes: 
//   History: 
//------------------------------------------------

local uint alignmentPaddingSize;

struct Padding
{
    byte padding[alignmentPaddingSize];
};

void Align(int blockSize)
{
    local uint offset = FTell();
    alignmentPaddingSize = blockSize + blockSize * (offset / blockSize) - offset;

    if (alignmentPaddingSize > 0 && alignmentPaddingSize < blockSize)
    {
        Padding padding<bgcolor=0x000000, hidden=true>;
    }
}

// ------------------------------------------------
// Structures
// ------------------------------------------------

struct ResourceId
{
    uint32 type;
    uint32 primary;
    uint32 secondary;
    uint32 flag;
};

struct BinHeader
{
    char identifier[12];
    int size;
    ResourceId resourceId;
};

struct ResourceArchiveHeader
{
    ResourceId resourceId;
    int32 offset;
    int32 size;
    uint64 dataOffset;
};

struct String
{
    string value;
};

struct StringBuffer
{
    local uint endOfStringBuffer = 0;
    if (currentTableIndex < paramTableHeader.tableCount)
    {
        endOfStringBuffer = 288 + paramTableHeader.offsets[currentTableIndex];
    }
    else
    {
        endOfStringBuffer = FileSize();
    }

    while (FTell() < endOfStringBuffer)
    {
        String value;
        byte next<hidden=true>;
        FSeek(FTell() - 1);

        if (next == 0)
        {
            break;
        }
    }
};

struct Message
{
    uint32 fixid;
    uint32 stringBinOffset;
    local uint returnAddress = FTell();
    FSeek(start + stringBinOffset);
    string message;
    FSeek(returnAddress);
};

struct Messages
{
    Message messages[messageCount]<optimize=false, bgcolor=0x00ffff>;
};

// ------------------------------------------------
// Main Template Logic
// ------------------------------------------------

BinHeader resourceArchiveBinHeader<bgcolor=0xffff00>;
ResourceArchiveHeader resourceArchiveHeader<bgcolor=0xff00aa>;
Align(256);

BinHeader paramTableBinHeader<bgcolor=0xffff00>;
local uint start = FTell();

uint32 messageCount<bgcolor=0x00ff00>;
Messages messages;

/*local uint i = 0;
for (i = 0; i < messageCount; i++)
{
    if (messages.messages[i].fixid == 184625229)
    {
        //Printf(messages.messages[i].message);
        Printf("String bin offset: %d", messages.messages[i].stringBinOffset);
    }
}*/


local uint i = 0;
local uint j = 0;
local char word[] = "A Most Behemoth Undertaking";
local uint wordPosition = 0;
for (i = 0; i < messageCount; i++)
{
    for (j = 0; j < Strlen(messages.messages[i].message); j++)
    {
        if (messages.messages[i].message[j] == word[wordPosition])
        {
            wordPosition++;
            if (wordPosition == Strlen(word))
            {
                Printf("Message Index: %d\n", i);
                Printf(messages.messages[i].message + "\n");
            }
        }
        else
        {
            wordPosition = 0;
        }
    }
}