//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: FFXV SWF Binary
//   Authors: Uhhhh
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: *.swfb
//  ID Bytes: 53 57 46 42 // SWFB
//   History: 
//------------------------------------------------

enum <char> BlendModeType
{
	BLEND_LINEAR = 0x0,
	BLEND_CUBIC = 0x1,
	BLEND_EASEIN = 0x2,
	BLEND_EASEOUT = 0x3,
	BLEND_EASEINOUT = 0x4,
	BLEND_CUSTOM_CURVE = 0x5,
	BLEND_FINTERP_TO = 0x6,
	BLEND_NONE = 0x7,
	BLEND_TIMELINE_CURVE = 0x8,
};

enum <unsigned int> PlaneType
{
    PLANE_SOLID = 0x0,
    PLANE_IMAGE = 0x40,
};

enum <char> ActionID {
    ACTION_PLAY = 0x6,
    ACTION_STOP = 0x7,
    ACTION_GOTOLABEL = 0x8C,
};

enum <unsigned short> TagID{
    TAG_END = 0x0,
    TAG_SHOWFRAME = 0x1,
    TAG_PLACEOBJECT = 0x4,
    TAG_REMOVEOBJECT = 0x5,
    TAG_DOACTION = 0xC,
    TAG_FRAMELABEL = 0x2B,
    TAG_9GRID = 0x4E,
};

enum <char> EditShapeAlign
{
    EDITSHAPE_ALIGN_LEFT = 0x0,
    EDITSHAPE_ALIGN_RIGHT = 0x1,
    EDITSHAPE_ALIGN_CENTER = 0x2,
    EDITSHAPE_ALIGN_TOP = 0x0,
    EDITSHAPE_ALIGN_BOTTOM = 0x10,
    EDITSHAPE_ALIGN_MIDDLE = 0x20,
};

enum <char> FilterType
{
    FILTER_DROP_SHADOW = 0x0,
    FILTER_GLOW = 0x2,
    FILTER_COLOR_MATRIX = 0x6,
};

struct Matrix{
    float scale[2]<bgcolor = cDkGreen>;
    float skew[2]<bgcolor = cDkGreen>;
    float translate[2]<bgcolor = cDkGreen>;
};

struct ColorTransform{
    float mult[4]<bgcolor = cLtGreen>;
    short add[4]<bgcolor = cLtGreen>;
};

unsigned int AssignColor(unsigned int i_val, byte shift)
{
    local unsigned int val = 0x00000000;
    val |= i_val;
    val = val << shift;
    
    return val;
}

struct Color{
    unsigned char r<bgcolor = (AssignColor(this, 0))>;
    unsigned char g<bgcolor = (AssignColor(this, 8))>;
    unsigned char b<bgcolor = (AssignColor(this, 16))>;
    
    char a<bgcolor=cGray>;
};

struct VertexColor{
    Color colors[4];
};

struct Vertex{
    float x;
    float y;
};

struct PlaneSolid{
    Color color;
};

struct Rectangle{
    float left<bgcolor=cLtBlue>;
    float right<bgcolor=cLtBlue>;
    float top<bgcolor=cLtBlue>;
    float bottom<bgcolor=cLtBlue>;
};

struct PlaneImage{
    unsigned short imageId;
    char padding[2]<hidden=true, bgcolor=cNone>;
};

struct Plane{
    PlaneType type;
    Vertex vertex[4];
    
    switch(type){
        case PLANE_SOLID: 
            PlaneSolid solid;
            break;
        case PLANE_IMAGE: 
            PlaneImage image;
            break;
    }
};

struct Filter{
    FilterType type;
    char padding[3]<hidden=true, bgcolor=cNone>;
    Color color;
    float horizontal, vertical;
    float radian_angle;
    float distance;
    float strength;
};

enum <unsigned int> TagPlaceObjectFlags{
    HAS_MATRIX = 0x1,
    HAS_COLOR = 0x2,
    HAS_VERTEX_COLOR = 0x4,
};

struct TagPlaceObject{
    unsigned short shapeId<bgcolor = cYellow>;
    unsigned short depth;
    BlendModeType blendMode;
    char filterNum<bgcolor = ( this != 0 ? cGreen : cRed )>;
    unsigned short clipDepth;
    unsigned int flags<bgcolor=0x018FF1>;
    
    if(flags & HAS_MATRIX)
    {
        Matrix matrix;
    }
    
    if(flags & HAS_COLOR)
    {
        ColorTransform colorTransform;
    }
    
    if(flags & HAS_VERTEX_COLOR)
    {
        VertexColor vertexColors;
    }
    
    Filter filters[filterNum]<optimize = false>;
    
};

struct TagRemoveObject{
    unsigned short depth;
    char padding[2]<hidden=true, bgcolor=cNone>;
};

struct ActionGotoLabel{
    unsigned int fixId<bgcolor=cPurple>;
};

struct Action{
    ActionID actionId;
    char padding[1]<hidden=true, bgcolor=cNone>;
    unsigned short actionSize;
	
	switch(actionId){
		case ACTION_GOTOLABEL:
			ActionGotoLabel gotoLabel;
			break;
	}
};

struct TagDoAction{
    unsigned int actionNum<bgcolor = ( this != 0 ? cGreen : cRed )>;
	Action actions[actionNum]<optimize = false>;
};

struct TagFrameLabel{
    unsigned int fixId<bgcolor=cPurple>;
};

struct Tag9Grid{
    unsigned short shapeId;
    char padding[2]<hidden=true, bgcolor=cNone>;
    Rectangle rectangle;
};

struct Tag{
    TagID tagId<bgcolor=0xE5DE52>;
    unsigned short tagSize<bgcolor = cBlack>;
    
    switch(tagId){
        case TAG_FRAMELABEL: 
            TagFrameLabel tag;
            break;
        case TAG_PLACEOBJECT: 
            TagPlaceObject tag;
            break;
		case TAG_DOACTION:
			TagDoAction tag;
			break;
        case TAG_9GRID:
            Tag9Grid tag;
            break;
        default:
            char tagData[tagSize-4]<optimize = false>;
    }
};



struct Label{
    unsigned int fixId<bgcolor=cPurple>;
    unsigned int tagIndex;
};

struct MovieClip{
    unsigned short shapeId<bgcolor = cYellow>;
    unsigned short labelNum<bgcolor = ( this != 0 ? cGreen : cRed )>;
    unsigned short tagNum<bgcolor = ( this != 0 ? cGreen : cRed )>;
    unsigned short maxDepth;
    
    Label labels[labelNum]<optimize = false>;
    Tag tags[tagNum]<optimize = false>;
};

struct Header{
    char magic[4]<bgcolor=cGray>;
    char version;
    char endian;
    short x;
    short y;
    unsigned short width;
    unsigned short height;
    unsigned short frameNum<bgcolor = ( this != 0 ? cGreen : cRed )>;
    float frameRate;
    unsigned short imageNum<bgcolor = ( this != 0 ? cGreen : cRed )>;
    unsigned short shapeNum<bgcolor = ( this != 0 ? cGreen : cRed )>;
    unsigned short editShapeNum<bgcolor = ( this != 0 ? cGreen : cRed )>;
    unsigned short movieClipNum<bgcolor = ( this != 0 ? cGreen : cRed )>;
    unsigned short labelNum<bgcolor = ( this != 0 ? cGreen : cRed )>;
    unsigned short tagNum<bgcolor = ( this != 0 ? cGreen : cRed )>;
    unsigned short maxDepth;
    unsigned short scalingGridNum<bgcolor = ( this != 0 ? cGreen : cRed )>;
    
    Color color;
};

struct Image{
    unsigned short imageId;
    char padding[2]<hidden=true, bgcolor=cNone>;
};

struct Shape{
    unsigned short shapeId<bgcolor = cYellow>;
    unsigned short planeNum<bgcolor = ( this != 0 ? cGreen : cRed )>;
    Rectangle bounds;
    
    Plane planes[planeNum]<optimize = false>;
};

struct EditShape{
    unsigned short shapeId<bgcolor = cYellow>;
    EditShapeAlign align;
    char padding[1]<hidden=true, bgcolor=cNone>;
    Rectangle bounds;
    unsigned int fixId<bgcolor=cPurple>;
};    
    
struct Binary{
    Header header_;
    Image images[header_.imageNum]<optimize = false, bgcolor = cRed>;
    Shape shapes[header_.shapeNum]<optimize = false>;
    EditShape editShapes[header_.editShapeNum]<optimize = false>;
    MovieClip movieClips[header_.movieClipNum]<optimize = false, bgcolor = cBlue>;
    Label labels[header_.labelNum]<optimize = false>;
    Tag tags[header_.tagNum]<optimize = false>;
    
};

Binary binary <name = "SWF Binary">;
