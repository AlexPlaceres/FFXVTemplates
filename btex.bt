// === WORK IN PROGRESS ===

//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
local string formatStrings = "none,X1R5G5B5,R5G6B5,X8R8G8B8,A8R8G8B8,B8,G8B8,A16B16G16R16F,A32B32G32R32F,R32F,X8B8G8R8,A8B8G8R8,D16,D16F,D24X8,D24S8,D24S8F,R6G5B5,G16R16F,G16R16,R16,A1R5G5B5,A4R4G4B4,R5G5B5A1,DXT1,DXT3,DXT5,V8U8,DXTN,G8R8A8B8,A8L8,B8G8R8A8,D32F,BC4,BC5,BC6,BC7,D32S8F,G8B8G8R8UN,G8R8,R16G16B16A16_SNORM,R8G8B8A8_SNORM,R8,R10G10B10A2_UNORM,R10G10B10A2_UINT,R8_UINT,R8_SNORM,R8_SINT,R8G8_UINT,R8G8_SNORM,R8G8_SINT,R8G8B8A8_UINT,R8G8B8A8_SINT,R16_UINT,R16_SNORM,R16_SINT,R16_FLOAT,R16G16_UINT,R16G16_SNORM,R16G16_SINT,R16G16B16A16_UNORM,R16G16B16A16_UINT,R16G16B16A16_SINT,R32_UINT,R32_SINT,R32G32_FLOAT,R32G32_UINT,R32G32_SINT,R32G32B32A32_UINT,R32G32B32A32_SINT,R8G8B8A8_UNORM_SRGB,BC1_UNORM_SRGB,BC2_UNORM_SRGB,BC3_UNORM_SRGB,B8G8R8A8_UNORM_SRGB,B8G8R8X8_UNORM_SRGB,BC7_UNORM_SRGB,R11G11B10_FLOAT,B10G10R10A2_UNORM";

struct fileHeader{
    char SEDBbtex[8];
    int64 version;
    int64 filesize;
    int64 padding[13];

};

struct mip{
    int32 offset;
    int32 size;
};

struct btexHeader{
    char BTEX[4];
    uint32 headerSize;
    uint32 imageDataSize;
    ushort version;
    ubyte platform;
    ubyte flags;
    ushort imageCount;
    ushort imageHeaderStride;
    uint imageHeaderOffset;
    uint64 padding;
};

struct highResData{
    uint32 highResMipCount;//Mipmap count for the high res texture image file
    uint32 highResBTexSize;//The size of the high res texture file from the BTex header
    uint64 padding;
};

struct mipArray{
    mip mipmaps [dds.mipcount];
    string filename;
};

struct mipdata{
    int32 tileMode;
    int32 arrayCount;
    mipArray mips[arrayCount];
};

struct imageData{
    ushort length;
    ushort width;
    ushort pitch;
    ushort formatEnum;
    ubyte mipcount;
    ubyte depth;
    ubyte dimensionsCount;
    ubyte imageFlags; //30 SRGB, 10 UNORM
    ushort surfaceCount;
    ushort surfaceHeaderStride;
    int platformDataOffset;
    int surfaceHeaderOffset;
    int nameOffset;
    int platformDataSize;
    highResData highRes;
    mipdata mips;
};


fileHeader header;
btexHeader btexData;
imageData dds[btexData.imageCount];

