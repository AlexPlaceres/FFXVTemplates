enum ArchiveHeaderFlags
{
	HasLooseData = 1,
	HasLocaleData = 2,
	DebugArchive = 4
};

enum ArchiveFlags
{
	AutoLoad = 1,
	Compressed = 2,
	Reference = 4,
	NoEarc = 8,
	Patched_ = 16,
	PatchedDeleted_ = 32,
	Encrypted = 64,
	MaskProtected = 128
};

enum PackType
{
	AutoLoadInternal,
	NoAutoLoadInternal,
	NoAutoLoadExternal,
	AutoLoadExternal,
	NoAutoLoadExternalNeedAddCompiledFile,
	AutoLoadExternalNeedAddCompiledFile,
	Patched,
	PatchedDeleted
};

const uint ProtectVersionFlag = 2147483648;

struct ArchiveHeader
{
    byte tagBytes[4];
    uint version;
    uint count;
    uint blockSize;
    uint tocStart;
    uint nameStart;
    uint fullPathStart;
    uint dataStart;
    uint flags;
    uint chunkSize;
    uint64 hash;
    byte _pad[16];
} archiveHeader <bgcolor=0x1E039A>;

local uint protectVersion = false;
if ((archiveHeader.version & ProtectVersionFlag) != 0u)
{
	protectVersion = true;
}

local uint64 encryptionhash = GetEncryptionKey(archiveHeader.flags) ^ archiveHeader.hash;
struct ArchiveCatalogEntry
{
	uint64 nameTypeHash <fgcolor=0xFFFFFF>;
	uint originalSize;
	uint compressedSize;
	uint flags;

    local PackType packType = GetPackTypeFromFlags(flags);

	uint nameStart;
    
    local uint position = FTell();
    FSeek(nameStart);
    string name;
    FSeek(position);

	uint64 dataStart;
	uint fullPathStart;

    local uint position2 = FTell();
    FSeek(fullPathStart);
    string fullPath;
    FSeek(position2);

	byte localizeType;
	byte localizeLocale;
	ushort key;

    local uint originalSize2 = originalSize;
    local uint compressedSize2 = compressedSize;
    local uint64 dataStart2 = dataStart;
    if (protectVersion && (flags & 128u) == 0u)
    {
        Printf("%s (Encrypted)\n", name);
        local uint64 expr_F3 = encryptionhash * 1099511628211 ^ nameTypeHash;
	    local uint64 num = expr_F3 * 1099511628211 ^ ~nameTypeHash;
	    local int num2 = (int)(expr_F3 >> 32);
	    local int num3 = (int)(expr_F3 & (uint64)((uint64)-1));
	    originalSize2 ^= num2;
	    compressedSize2 ^= num3;
	    dataStart2 ^= num;
	    encryptionhash = num;
    }
    else
    {
        Printf("%s (NOT Encrypted)\n", name);
    }

    local uint position3 = FTell();
    FSeek(dataStart2);
    Printf("compressedSize: %ud\n", compressedSize2);
    Printf("dataStart: %ud\n", dataStart2);
    byte data[compressedSize2] <bgcolor=0xFFC366>;        
    FSeek(position3);
} catalogEntries[archiveHeader.count] <optimize=false, bgcolor=0x400F5F>;

PackType GetPackTypeFromFlags(uint flags)
{
    if ((flags & 4) != 0)
	{
		if ((flags & 1) == 0)
		{
			return NoAutoLoadExternal;
		}

		return AutoLoadExternal;
	}

	if ((flags & 1) == 0)
	{
		return NoAutoLoadInternal;
	}

    return AutoLoadInternal;
}

uint64 GetEncryptionKey(uint archiveFlags)
{
    if ((archiveFlags & 8u) == 0u)
	{
		return -3750763034362895579;
	}

	return 4671583711416884655;
}