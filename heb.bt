enum<byte> HebImageType
{
    TYPE_HEIGHT_MAP,
    TYPE_MASK_MAP,
    TYPE_TEXTURE_MAP,
    TYPE_ATTRIBUTE,
    TYPE_NORMAL_MAP,
    TYPE_EROSION_MAP,
    TYPE_MERGED_MASK_MAP,
    TYPE_VERTEX_DATA,
    TYPE_DIFFUSE_MAP,
    TYPE_OCCLUSION_MAP,
    TYPE_ROUGHNESS_MAP,
    TYPE_SLOPE_MAP,
    TYPE_OCCLUDER_DATA,
    TYPE_PHYSX_COLLISION_DATA,
    TYPE_SLOPE_MASK_MAP,
    TYPE_UMBRA_DATA,
    TYPE_SCULPT_FROTTAGE
};

enum<byte> HebImageTileMode
{
    TILE_MODE_TYPE_NONE  = 0x0,
    TILE_MODE_TYPE_COMP_DEPTH_1  = 0x1,
    TILE_MODE_TYPE_COMP_DEPTH_2  = 0x2,
    TILE_MODE_TYPE_COMP_DEPTH_3  = 0x3,
    TILE_MODE_TYPE_COMP_DEPTH_4  = 0x4,
    TILE_MODE_TYPE_UNC_DEPTH_5  = 0x5,
    TILE_MODE_TYPE_UNC_DEPTH_6  = 0x6,
    TILE_MODE_TYPE_UNC_DEPTH_7  = 0x7,
    TILE_MODE_TYPE_LINEAR  = 0x8,
    TILE_MODE_TYPE_DISPLAY  = 0x9,
    TILE_MODE_TYPE_2D_DISPLAY  = 0xA,
    TILE_MODE_TYPE_RESERVED_11  = 0xB,
    TILE_MODE_TYPE_RESERVED_12  = 0xC,
    TILE_MODE_TYPE_1D_THIN  = 0xD,
    TILE_MODE_TYPE_2D_THIN  = 0xE,
    TILE_MODE_TYPE_RESERVED_15  = 0xF,
    TILE_MODE_TYPE_TILED_1D_THIN  = 0x10,
    TILE_MODE_TYPE_TILED_2D_TIN  = 0x11,
    TILE_MODE_TYPE_RESERVED_18  = 0x12,
    TILE_MODE_TYPE_RESERVED_19  = 0x13,
    TILE_MODE_TYPE_RESERVED_20  = 0x14,
    TILE_MODE_TYPE_RESERVED_21  = 0x15,
    TILE_MODE_TYPE_RESERVED_22  = 0x16,
    TILE_MODE_TYPE_RESERVED_23  = 0x17,
    TILE_MODE_TYPE_RESERVED_24  = 0x18,
    TILE_MODE_TYPE_RESERVED_25  = 0x19,
    TILE_MODE_TYPE_RESERVED_26  = 0x1A,
    TILE_MODE_TYPE_RESERVED_27  = 0x1B,
    TILE_MODE_TYPE_RESERVED_28  = 0x1C,
    TILE_MODE_TYPE_RESERVED_29  = 0x1D,
    TILE_MODE_TYPE_RESERVED_30  = 0x1E,
    TILE_MODE_TYPE_LINEAR_GENERAL  = 0x1F
};

struct ImageHeader {
    byte flags<bgcolor=0x00ff00>;
    HebImageType type<bgcolor=0x00ff00>;
    byte typeIndex<bgcolor=0x00ff00>;
    byte mipCount<bgcolor=0x00ff00>;

    uint textureDataOffset<bgcolor=0xff0000>;

    // For heightmap texture
    float averageHeight<bgcolor=0x00ff00>;

    byte textureFormat<bgcolor=0x00ff00>;
    HebImageTileMode tileMode<bgcolor=0x00ff00>;
    ushort reserved1<bgcolor=0x000000>;

    // For heightmap texture
    ushort minHeight<bgcolor=0x00ff00>;
    ushort maxHeight<bgcolor=0x00ff00>;

    int textureSizeBytes<bgcolor=0x00ff00>;
    int textureWidth<bgcolor=0x00ff00>;
    int textureHeight<bgcolor=0x00ff00>;
};

struct HEBHeader {
    BigEndian();
    uint imageHeadersOffset<bgcolor=0xff0000>;
    ushort imageHeaderSize<bgcolor=0x00ff00>;
    ushort imageCount<bgcolor=0xff00aa>;
    LittleEndian();

    byte padding[24]<bgcolor=0x000000>;

    ImageHeader imageHeaders[imageCount];

    local int headerSize = 224;
    local int padding2Size = headerSize - imageCount * 32;

    if (padding2Size > 0)
        byte padding2[padding2Size]<bgcolor=0x000000>;
};

HEBHeader Header;
